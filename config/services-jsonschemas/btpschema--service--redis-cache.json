{
    "category": "SERVICE",
    "name": "redis-cache",
    "defs": [
        
        {
            "ref-attribute": "parameters",
            "ref-level": "plan",
            "ref-value": "premium",
            "def-name": "parameters--redis-cache--premium",
            "def-structure":
                {"service_instance": {"create": {"parameters": {"$id": "http://example.com/schemas/redis-premium-create.json", "$schema": "http://json-schema.org/draft/schema#", "_show_form_view": true, "additionalProperties": true, "properties": {"cluster_mode": {"default": true, "description": "Indicates whether the instance is clustered redis deployment. If not provided, it is defaulted to true.", "type": "boolean"}, "engine_version": {"default": "4.0", "description": "The major version number of the cache engine to be used for the clusters. If not provided, the major version is defaulted to 4.0", "enum": ["4.0"], "type": "string"}, "eviction_policy": {"default": "noeviction", "description": "The eviction policy for keys when maximum memory usage is reached. Default is \u0027noeviction\u0027", "enum": ["allkeys-lru", "volatile-lru", "allkeys-lfu", "volatile-lfu", "allkeys-random", "volatile-random", "volatile-ttl", "noeviction"], "type": "string"}, "maintenance_window": {"description": "Indicates the maintenance window for the Redis cache.", "properties": {"day_of_week": {"default": "Sunday", "description": "Day of the week when Redis cache instance can be patched.", "enum": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], "type": "string"}, "duration": {"default": 5, "description": "Number of hours required for patching the Redis cache instance.", "maximum": 23, "minimum": 5, "type": "integer"}, "start_hour_utc": {"default": 4, "description": "Start hour after which patching of the Redis cache instance can start.", "maximum": 23, "minimum": 0, "type": "integer"}}, "type": "object"}, "memory": {"default": 8, "description": "Defines amount of memory (in GB) to be used for the instance. The number of CPU cores is also derived from the value based on the premium plan\u0027s semantics", "enum": [8, 16, 32, 64], "type": "integer"}, "multi_az": {"default": true, "description": "Indicates whether the instance is a multi-AZ deployment. If not provided, it is defaulted to true.", "type": "boolean"}, "node_count": {"default": 3, "description": "Indicates the number of nodes per shard within the Redis cluster. If not provided, it is defaulted to 3. For instances with multiple shards and nodes per shard, the number of storage SKU units deducted from available entitlements is equal to the total nodes count in the cluster.", "maximum": 6, "minimum": 3, "type": "integer"}, "notify_keyspace_events": {"default": "", "description": "Indicates the keyspace events for which notifications are enabled. If not provided, notifications are disabled.", "pattern": "^[KEg$lshzxeA]*$", "type": "string"}, "shard_count": {"default": 1, "description": "Indicates the number of shards within the Redis cluster. If not provided, it is defaulted to 1. For instances with multiple shards and nodes per shard, the number of storage SKU units deducted from available entitlements is equal to the total nodes count in the cluster.", "maximum": 90, "minimum": 1, "type": "integer"}}, "type": "object"}}, "update": {"parameters": {"$id": "http://example.com/schemas/redis-premium-update.json", "$schema": "http://json-schema.org/draft/schema#", "_show_form_view": true, "additionalProperties": true, "properties": {"engine_version": {"description": "The major version number of the cache engine to be used for the clusters. If not provided, the major version is defaulted to 4.0", "enum": ["4.0"], "type": "string"}, "eviction_policy": {"description": "The eviction policy for keys when maximum memory usage is reached. Default is \u0027noeviction\u0027", "enum": ["allkeys-lru", "volatile-lru", "allkeys-lfu", "volatile-lfu", "allkeys-random", "volatile-random", "volatile-ttl", "noeviction"], "type": "string"}, "maintenance_window": {"description": "Indicates the maintenance window for the Redis cache.", "properties": {"day_of_week": {"default": "Sunday", "description": "Day of the week when Redis cache instance can be patched.", "enum": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], "type": "string"}, "duration": {"default": 5, "description": "Number of hours required for patching the Redis cache instance.", "maximum": 23, "minimum": 5, "type": "integer"}, "start_hour_utc": {"default": 4, "description": "Start hour after which patching of the Redis cache instance can start.", "maximum": 23, "minimum": 0, "type": "integer"}}, "type": "object"}, "memory": {"description": "Defines amount of memory (in GB) to be used for the instance. The number of CPU cores is also derived from the value based on the premium plan\u0027s semantics. Note that memory cannot be downscaled", "enum": [8, 16, 32, 64], "type": "integer"}, "multi_az": {"description": "Indicates whether the instance is a multi-AZ deployment. Only non-multi-AZ to multi-AZ is allowed.", "type": "boolean"}, "node_count": {"description": "Indicates the number of nodes per shard within the Redis cluster. If not provided, it is defaulted to 3. For instances with multiple shards and nodes per shard, the number of storage SKU units deducted from available entitlements is equal to the total nodes count in the cluster.", "maximum": 6, "minimum": 3, "type": "integer"}, "notify_keyspace_events": {"description": "Indicates the keyspace events for which notifications are enabled. If not provided, notifications are disabled.", "pattern": "^[KEg$lshzxeA]*$", "type": "string"}, "shard_count": {"description": "Indicates the number of shards within the Redis cluster. If not provided, it is defaulted to 1. For instances with multiple shards and nodes per shard, the number of storage SKU units deducted from available entitlements is equal to the total nodes count in the cluster.", "maximum": 90, "minimum": 1, "type": "integer"}}, "type": "object"}}}}
            
        },
        
        {
            "ref-attribute": "parameters",
            "ref-level": "plan",
            "ref-value": "standard",
            "def-name": "parameters--redis-cache--standard",
            "def-structure":
                {"service_binding": {"create": {"parameters": {"$schema": "http://json-schema.org/draft-04/schema#", "properties": {"abap_endpoint_timeout": {"description": "Timeout for requests issued by approuter to ABAP backend", "maximum": 600000, "type": ["integer", "null"]}}, "type": "object"}}}, "service_instance": {"create": {"parameters": {"$schema": "http://json-schema.org/draft-04/schema#", "oneOf": [{"additionalProperties": false, "properties": {"addon_product_name": {"description": "Registered name of the addon product. Will be passed through to ABAP OEM Plan", "type": "string"}, "addon_product_version": {"description": "Version of the addon product that should be installed. Will be passed through to ABAP OEM Plan", "type": "string"}, "consumer_id_pattern": {"description": "String containing a regular expression with a capturing group. The subdomain of the consumer is matched against this regular expression. The value of the first capturing group is used as consumer id.", "type": "string"}, "consumer_tenant_limit": {"default": 1, "description": "Maximum number of tenants in ABAP System", "maximum": 800, "minimum": 1, "type": "integer"}, "name": {"description": "Name of the solution", "type": "string"}, "provider_admin_email": {"description": "Email address of initial provider user. Will be passed through to ABAP OEM Plan", "format": "email", "type": "string"}, "sap_system_name": {"description": "Name of the SAP system", "pattern": "(^$)|(^(?!ADD|ALL|AMD|AND|ANY|ARE|ASC|AUX|AVG|BIT|CDC|COM|CON|DBA|END|EPS|FOR|GET|GID|IBM|INT|KEY|LOG|LPT|MAP|MAX|MIN|MON|NIX|NOT|NUL|OFF|OLD|OMS|OUT|PAD|PRN|RAW|REF|ROW|SAP|SET|SGA|SHG|SID|SQL|SUM|SYS|TMP|TOP|UID|USE|USR|VAR)[A-Z][A-Z0-9]{2}$)", "type": "string"}, "size_of_persistence": {"default": 4, "description": "Default size of the ABAP system (in blocks of the size 16 GB). Will be passed through to ABAP OEM Plan", "enum": [4, 8, 16, 32, 64], "type": "integer"}, "size_of_runtime": {"default": 1, "description": "Default size of the HANA database (in blocks of the size 16 GB) of the ABAP System. Will be passed through to ABAP OEM Plan", "enum": [1, 2, 4, 6, 8], "type": "integer"}, "tenant_mode": {"description": "Decides whether a customer will have a tenant in a dedicated system (single) or a shared system (multi)", "enum": ["single", "multi"], "type": "string"}, "usage": {"description": "Whether it is a test or productive solution", "enum": ["test", "prod"], "type": "string"}, "xs-security": {"properties": {"xsappname": {"description": "xsappname used for the OAuth clone during the instance creation", "type": "string"}}, "type": "object"}}, "required": ["name", "consumer_id_pattern", "size_of_runtime", "size_of_persistence", "tenant_mode", "provider_admin_email", "usage"], "type": "object"}, {"additionalProperties": false, "properties": {"consumer_id_pattern": {"description": "String containing a regular expression with a capturing group. The subdomain of the consumer is matched against this regular expression. The value of the first capturing group is used as consumer id.", "type": "string"}, "name": {"description": "Name of the solution", "type": "string"}, "plans": {"items": {"properties": {"addon_product_name": {"description": "Registered name of the addon product. Will be passed through to ABAP OEM Plan", "type": "string"}, "addon_product_version": {"description": "Version of the addon product that should be installed. Will be passed through to ABAP OEM Plan", "type": "string"}, "consumer_tenant_limit": {"default": 1, "description": "Maximum number of tenants in ABAP System", "maximum": 800, "minimum": 1, "type": "integer"}, "plan_name": {"default": "default", "description": "Name of the plan", "pattern": "^[A-Z0-9a-z-_/ ]*$", "type": "string"}, "provider_admin_email": {"description": "Email address of initial provider user. Will be passed through to ABAP OEM Plan", "format": "email", "type": "string"}, "sap_system_name": {"description": "Name of the SAP system", "pattern": "(^$)|(^(?!ADD|ALL|AMD|AND|ANY|ARE|ASC|AUX|AVG|BIT|CDC|COM|CON|DBA|END|EPS|FOR|GET|GID|IBM|INT|KEY|LOG|LPT|MAP|MAX|MIN|MON|NIX|NOT|NUL|OFF|OLD|OMS|OUT|PAD|PRN|RAW|REF|ROW|SAP|SET|SGA|SHG|SID|SQL|SUM|SYS|TMP|TOP|UID|USE|USR|VAR)[A-Z][A-Z0-9]{2}$)", "type": "string"}, "size_of_persistence": {"default": 4, "description": "Default size of the ABAP system (in blocks of the size 16 GB). Will be passed through to ABAP OEM Plan", "enum": [4, 8, 16, 32, 64], "type": "integer"}, "size_of_runtime": {"default": 1, "description": "Default size of the HANA database (in blocks of the size 16 GB) of the ABAP System. Will be passed through to ABAP OEM Plan", "enum": [1, 2, 4, 6, 8], "type": "integer"}, "tenant_mode": {"description": "Decides whether a customer will have a tenant in a dedicated system (single) or a shared system (multi)", "enum": ["single", "multi"], "type": "string"}, "usage": {"description": "Whether it is a test or productive solution", "enum": ["test", "prod"], "type": "string"}}, "required": ["plan_name", "size_of_runtime", "size_of_persistence", "tenant_mode", "provider_admin_email", "usage"], "type": "object"}, "minItems": 1, "type": "array"}, "xs-security": {"properties": {"xsappname": {"description": "xsappname used for the OAuth clone during the instance creation", "type": "string"}}, "type": "object"}}, "required": ["name", "consumer_id_pattern", "plans"], "type": "object"}], "type": "object"}}}}
            
        },
        
        {
            "ref-attribute": "parameters",
            "ref-level": "plan",
            "ref-value": "free",
            "def-name": "parameters--redis-cache--free",
            "def-structure":
                {"service_instance": {"create": {"parameters": {"$id": "http://example.com/schemas/redis-free-create.json", "$schema": "http://json-schema.org/draft/schema#", "_show_form_view": true, "additionalProperties": true, "properties": {"engine_version": {"default": "4.0", "description": "The major version number of the cache engine to be used for the clusters. If not provided, the major version is defaulted to 4.0", "enum": ["4.0"], "type": "string"}, "eviction_policy": {"default": "noeviction", "description": "The eviction policy for keys when maximum memory usage is reached. Default is \u0027noeviction\u0027", "enum": ["allkeys-lru", "volatile-lru", "allkeys-lfu", "volatile-lfu", "allkeys-random", "volatile-random", "volatile-ttl", "noeviction"], "type": "string"}}, "type": "object"}}, "update": {"parameters": {"$id": "http://example.com/schemas/redis-free-update.json", "$schema": "http://json-schema.org/draft/schema#", "_show_form_view": true, "additionalProperties": true, "properties": {"engine_version": {"description": "The major version number of the cache engine to be used for the clusters. If not provided, the major version is defaulted to 4.0", "enum": ["4.0"], "type": "string"}, "eviction_policy": {"description": "The eviction policy for keys when maximum memory usage is reached. Default is \u0027noeviction\u0027", "enum": ["allkeys-lru", "volatile-lru", "allkeys-lfu", "volatile-lfu", "allkeys-random", "volatile-random", "volatile-ttl", "noeviction"], "type": "string"}}, "type": "object"}}}}
            
        }
         
    ]
}